import copy
def filter_type_1_single(action_list):
    # 单排过滤
    pass


def filter_type_2_pair(action_list):
    # 对子过滤
    pass


def filter_type_3_triple(action_list):
    # 三张过滤
    pass


def filter_type_4_bomb(action_list):
    # 炸弹过滤
    pass


def filter_type_5_king_bomb(action_list, total_action_combination):
    # 王炸过滤
    # 如果说可行的动作中有王炸，并且可行动作中还有其他做法，就把王炸给过滤掉
    # 当然这种做法过于粗糙，需要判断actio_list中，除了王炸外，其余动作会不会产生拆牌的动作
    action_list_copy = copy.deepcopy(action_list)
    if [20, 30] in action_list_copy and [] in action_list_copy:
        # 如果可行动作中有王炸以及过牌两种以外的其他动作，就不要使用王炸了
        if len(action_list) >= 2:
            action_list_copy.remove([20, 30])
    # 这样子就相当于把王炸给删除了
    return action_list_copy
    



def filter_type_6_3_1(action_list):
    # 三带一过滤
    pass


def filter_type_7_3_2(action_list):
    # 三带一对过滤
    pass


def filter_type_8_serial_single(action_list):
    # 顺子过滤
    pass


def filter_type_9_serial_pair(action_list):
    # 连队出牌
    pass


def filter_type_10_serial_triple(action_list):
    # 飞机不带牌
    pass


def filter_type_11_serial_triple_single(action_list):
    # 飞机带两张单牌
    pass


def filter_type_12_serial_triple_pair(action_list):
    # 飞机带对子
    pass


def filter_type_13_4_2(action_list):
    # 炸弹带两个单牌
    pass


def filter_type_13_4_22(action_list):
    # 炸弹带两个对子
    # 这个逻辑稍微简单一些，如果两个
    pass


def filter_action(legal_action_list, total_action_combination):
    # action_dict表示所有能够合法动作构成的列表
    
    # total_action_combination表示当前手牌所有合法的动作组合
    # 这里简单调用一下王炸过滤函数
    filter_type_5_king_bomb(legal_action_list, total_action_combination)
    pass


legal_action = [
    [5],
    [6],
    [7],
    [8],
    [9],
    [10],
    [11],
    [12],
    [13],
    [14],
    [17],
    [20],
    [30],
    [6, 6],
    [9, 9],
    [10, 10],
    [11, 11],
    [14, 14],
    [17, 17],
    [17, 17, 17],
    [20, 30],
    [5, 17, 17, 17],
    [6, 17, 17, 17],
    [7, 17, 17, 17],
    [8, 17, 17, 17],
    [9, 17, 17, 17],
    [10, 17, 17, 17],
    [11, 17, 17, 17],
    [12, 17, 17, 17],
    [13, 17, 17, 17],
    [14, 17, 17, 17],
    [17, 17, 17, 20],
    [17, 17, 17, 30],
    [6, 6, 17, 17, 17],
    [9, 9, 17, 17, 17],
    [10, 10, 17, 17, 17],
    [11, 11, 17, 17, 17],
    [14, 14, 17, 17, 17],
    [5, 6, 7, 8, 9],
    [6, 7, 8, 9, 10],
    [7, 8, 9, 10, 11],
    [8, 9, 10, 11, 12],
    [9, 10, 11, 12, 13],
    [10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10],
    [6, 7, 8, 9, 10, 11],
    [7, 8, 9, 10, 11, 12],
    [8, 9, 10, 11, 12, 13],
    [9, 10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10, 11],
    [6, 7, 8, 9, 10, 11, 12],
    [7, 8, 9, 10, 11, 12, 13],
    [8, 9, 10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10, 11, 12],
    [6, 7, 8, 9, 10, 11, 12, 13],
    [7, 8, 9, 10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10, 11, 12, 13],
    [6, 7, 8, 9, 10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    [9, 9, 10, 10, 11, 11],
]

total_combination = [
    [5],
    [6],
    [7],
    [8],
    [9],
    [10],
    [11],
    [12],
    [13],
    [14],
    [17],
    [20],
    [30],
    [6, 6],
    [9, 9],
    [10, 10],
    [11, 11],
    [14, 14],
    [17, 17],
    [17, 17, 17],
    [20, 30],
    [5, 17, 17, 17],
    [6, 17, 17, 17],
    [7, 17, 17, 17],
    [8, 17, 17, 17],
    [9, 17, 17, 17],
    [10, 17, 17, 17],
    [11, 17, 17, 17],
    [12, 17, 17, 17],
    [13, 17, 17, 17],
    [14, 17, 17, 17],
    [17, 17, 17, 20],
    [17, 17, 17, 30],
    [6, 6, 17, 17, 17],
    [9, 9, 17, 17, 17],
    [10, 10, 17, 17, 17],
    [11, 11, 17, 17, 17],
    [14, 14, 17, 17, 17],
    [5, 6, 7, 8, 9],
    [6, 7, 8, 9, 10],
    [7, 8, 9, 10, 11],
    [8, 9, 10, 11, 12],
    [9, 10, 11, 12, 13],
    [10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10],
    [6, 7, 8, 9, 10, 11],
    [7, 8, 9, 10, 11, 12],
    [8, 9, 10, 11, 12, 13],
    [9, 10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10, 11],
    [6, 7, 8, 9, 10, 11, 12],
    [7, 8, 9, 10, 11, 12, 13],
    [8, 9, 10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10, 11, 12],
    [6, 7, 8, 9, 10, 11, 12, 13],
    [7, 8, 9, 10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10, 11, 12, 13],
    [6, 7, 8, 9, 10, 11, 12, 13, 14],
    [5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    [9, 9, 10, 10, 11, 11],
]
